{
	"name": "DF_DQCheck_IMDb",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_silver_imdb_csv",
						"type": "DatasetReference"
					},
					"name": "IMDbSilverSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_MetaDQIssues",
						"type": "DatasetReference"
					},
					"name": "WriteDQRowToSQL"
				}
			],
			"transformations": [
				{
					"name": "CheckDQIssues"
				},
				{
					"name": "PrepareDQTitle"
				},
				{
					"name": "PrepareDQVoteAvg"
				},
				{
					"name": "PrepareDQRuntime"
				},
				{
					"name": "PrepareDQRevenue"
				},
				{
					"name": "PrepareDQReleaseDate"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          title as string,",
				"          vote_average as double,",
				"          vote_count as short,",
				"          status as string,",
				"          release_date as date,",
				"          revenue as integer,",
				"          runtime as short,",
				"          adult as boolean,",
				"          backdrop_path as string,",
				"          budget as integer,",
				"          homepage as string,",
				"          imdb_id as string,",
				"          original_language as string,",
				"          original_title as string,",
				"          overview as string,",
				"          popularity as string,",
				"          poster_path as string,",
				"          tagline as string,",
				"          production_companies as string,",
				"          production_countries as string,",
				"          spoken_languages as string,",
				"          keywords as string,",
				"          release_year as string,",
				"          Director as string,",
				"          AverageRating as string,",
				"          Poster_Link as string,",
				"          Certificate as string,",
				"          IMDB_Rating as string,",
				"          Meta_score as string,",
				"          Star1 as string,",
				"          Star2 as string,",
				"          Star3 as string,",
				"          Star4 as string,",
				"          Writer as string,",
				"          Director_of_Photography as string,",
				"          Producers as string,",
				"          Music_Composer as string,",
				"          genres_list as string,",
				"          Cast_list as string,",
				"          overview_sentiment as string,",
				"          all_combined_keywords as string,",
				"          title_clean as string,",
				"          status_clean as string,",
				"          genres_clean as string,",
				"          overview_clean as string,",
				"          star1_clean as string,",
				"          original_title_clean as string,",
				"          vote_avg_cast as double,",
				"          revenue_cast as double,",
				"          budget_cast as double,",
				"          runtime_cast as short,",
				"          release_dt as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> IMDbSilverSource",
				"IMDbSilverSource aggregate(null_title_count = countIf(isNull(title_clean) || length(title_clean) == 0),",
				"          bad_rating_count = countIf(vote_average > 0 || vote_average < 10),",
				"          invalid_runtime_count = countIf(runtime <= 0),",
				"          invalid_revenue_count = countIf(revenue < 0),",
				"          null_release_date_count = countIf(isNull(release_date))) ~> CheckDQIssues",
				"CheckDQIssues derive(TableName = \"IMDb\",",
				"          ColumnName = \"Title\",",
				"          IssueType = \"NullValue\",",
				"          IssueCount = null_title_count) ~> PrepareDQTitle",
				"CheckDQIssues derive(TableName = 'IMDB',",
				"          ColumnName = 'bad_rating_count',",
				"          IssueType = 'count of bad rating value',",
				"          IssueCount = bad_rating_count) ~> PrepareDQVoteAvg",
				"CheckDQIssues derive(TableName = 'IMDB',",
				"          ColumnName = 'Runtime',",
				"          IssueType = 'Range violation',",
				"          IssueCount = invalid_runtime_count) ~> PrepareDQRuntime",
				"CheckDQIssues derive(TableName = 'IMDB',",
				"          ColumnName = 'Revenue',",
				"          IssueType = 'invaild revenue violations',",
				"          IssueCount = invalid_revenue_count) ~> PrepareDQRevenue",
				"CheckDQIssues derive(TableName = 'IMDB',",
				"          ColumnName = 'Release_date',",
				"          IssueType = 'Invaild date or null dates',",
				"          IssueCount = null_release_date_count) ~> PrepareDQReleaseDate",
				"PrepareDQTitle, PrepareDQVoteAvg, PrepareDQRuntime, PrepareDQRevenue, PrepareDQReleaseDate union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DQID as integer,",
				"          TableName as string,",
				"          ColumnName as string,",
				"          IssueType as string,",
				"          IssueCount as integer,",
				"          CheckDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> WriteDQRowToSQL"
			]
		}
	}
}